---
title: Online learning and FoReL
author: Calvin
---

**Note: This blog post is still a rough draft. Read on with caution.**

In part 2 of our unthemed dive into the reinforcement learning literature, we will be taking a look at online (convex) optimization and some reinforcement learning algorithms that came out of it, applied to imperfect-information zero-sum games.

The last post focused on counterfactual regret minimization, which was also an online algorithm for choosing the optimal strategies for an agent. The success of counterfactual regret minimization came from its strong theoretical guarantees of sublinear regret growth, along with its generality. As such, it seems fitting to start with a general overview of the ideas behind online optimization and see what other ideas came out of it that could be fruitful for future AIs.

### online learning

In machine learning, online learning is the process of continuously adapting and making decisions from streams of information: at each point in a time $t$, an online learning algorithm is given an informational signal $x_t$ from a space $\mathcal{X}$, and decides on an action $a_t\in\mathcal{A}$ to perform. After their decision, the environment/opponent chooses a loss function $\ell^t$ and causes the agent to suffer a loss $\ell^t(x_t, a_t)$. The algorithm learns from this loss and updates its processes for the next time.

```python
for _ in range(num_timesteps):
    signal_t = env.receive_signal()
    action_t = learner.decide(signal_t)
    loss_t = env.receive_loss()
    loss = loss_t(signal_t, action_t)
    learner.suffer(loss)
```

The goal of the learner is to minimize their **regret**

$$ R^T = \max_{a^*\in\mathcal{A}}\left\{\sum_{t=1}^T\ell^t(x_t, a^*)\right\} - \sum_{t=1}^T\ell^t(x_t, a_t) $$

We call such an online learning setting **learnable** if we can achieve sublinear regret in $T$.

Let us give a vibe for the field with an example. Consider the $n$-*expert opinion* setting, where we at each time step we are trying to perform a binary action, i.e. $a_t\in\mathcal{A}=\{0, 1\}$. To inform us on what action to take, we listen to $n$ "experts", which in our setting is a vector of 0's and 1's $x_t\in\mathcal{X}=\{0,1\}^n$. After the learner takes their binary action, the true answer in $\{0,1\}$ is revealed and the loss is given by the 0-1 loss

$$  
\begin{equation}
    \ell^t(x_t, a_t) = 
    \begin{cases}
        1 & \text{if } a_t\text{ is correct answer}\\
        0 & \text{otherwise}
    \end{cases}
\end{equation}
$$

We can then see that the regret $R^T$ is merely the **number of mistakes** made by the learner after $T$ attempts. 

In this [paper](https://www.sciencedirect.com/science/article/pii/S0890540184710091?via%3Dihub) of Littlestone-Warmuth, a simple algorithm called the **weighted majority algorithm** is introduced that achieves sublinear regret for this problem. We maintain a list of weights $w_1,...,w_n$, one for each expert, and we vote on an action based on weighted majority of the experts-- that is, for the expert opinions $(x_1,...,x_n)\in\{0,1\}^n$, we vote 1 if

$$  \sum_{i:x_i=1} w_i \ge \sum_{i:x_i=0} w_i $$

and 0 otherwise. 

Once we receive the correct answer, we penalize each incorrect expert by multiplying their weight by 0.5. In code:

```python
import numpy as np

class WeightedMajority(Learner):
    def __init__(self, num_experts: int):
        self.num_experts = num_experts
        # initialize weights of experts to 1.0
        self.weights = np.repeat(1.0, num_experts)
        self.last_opinions = None
    
    def decide(self, opinions: np.ndarray) -> int:
        # weighted majority vote
        total_weight_0 = np.sum(self.weights * (1 - opinions))
        total_weight_1 = np.sum(self.weights * opinions)
        self.last_opinions = opinions
        return 1 if total_weight_1 >= total_weight_0 else 0

    def suffer(self, loss: int):
        # here, loss is the "correct answer" in {0, 1}
        wrong_experts = self.weights[self.last_opinions != loss]
        wrong_experts *= 0.5
        self.weights[self.last_opinions != loss] = wrong_experts
```

The *main theorem* of Littlestone-Warmuth is a regret analysis of this learning algorithm: the number of mistakes $R^T$ made by the weighted majority learner is bounded above by

$$ R^T \le 2.41(m + \log_2{n}) $$

where $m$ is the number of mistakes made by the best expert so far.

**Proof:** This is fairly straightforward. Let $W$ be the total weight of all experts (so initially $W=n$). If the learner makes a mistake, that means that more than half the total weight is on the wrong experts, so that chunk will be halved. As a consequence, we lose at least a 1/4th of our total weight. So

$$ W \le n(3/4)^M $$

where $M$ is the total number of mistakes made (above we called it $R^T$).

On the contrary, if our best expert made $m$ mistakes, it's weight is $1/2^m$ and so $W\ge 1/2^m$ at least. Combining the two gives

$$ 1/2^m \le n(3/4)^M $$

which rearranging gives the regret bound. $\square$

It is often the case that many algorithms in computer science are enhanced by introducing randomness. Applying it to this situation will miraculously give a better regret bound! Here, instead of weighted majority vote, we normalize the weights into *probabilities* and choose as our action the opinion of a randomly chosen expert. We also then multiply the weights of all wrong experts by $\beta$, where $\beta$ is some hyperparameter we can tune the algorithm with.

Via a similar argument, we can prove the regret bound

$$ R^T \le \frac{m\log(1/\beta) + \log n}{1-\beta} $$

where, again $m$ is the number of mistakes made by the best expert so far.

### convex optimization

A special case that we will focus on is the setting of **online convex optimization**. Here, we receive **no** signals $x_t$ from the environment, and instead our "actions" will be points in a convex domain $a_t\in\mathcal{K}$. The loss here will be given by an arbitrary convex function $f_t$, and so the goal of our convex optimizer is to minimize the regret term

$$ R^T = \max_{a^*\in\mathcal{K}}\left\{\sum_{t=1}^T f_t(a^*)\right\} - \sum_{t=1}^T f_t(a_t) $$

Our goal in this post is to introduce and derive some important algorithms for solving the online convex optimization problem, and apply these algorithms to game-theoretic solutions in modern machine learning.

Online convex optimization in pseudocode is given by:

```python
for _ in range(num_timesteps):
    x_t = learner.generate()
    f_t = env.receive_loss()
    loss = f_t(x_t)
    learner.suffer(loss)
```

which is similar to the general online learning situation above. In OCO we are trying to compute the *offline optimum*

$$ \min_{x\in\mathcal{K}}\sum_{t=1}^T f_t(x) $$

(which is equivalent to getting sublinear regret), where our $f_t$ is coming from a potentially constrained space of functions $\mathcal{F}$. The **goal** is to, in a generic way, get a regret bound of the form

$$ R^T \le \mathcal{O}_{\mathcal{K},\mathcal{F}}(\sqrt{T}) $$

Like in the last section, we will first describe an online convex optimization problem inspired by the expert opinion problem: here we have $n$ experts, with a goal to best utilize the opinions of the experts in order to minimize a linear loss.

At time $t=1,2,...$ we need to decide $x_t\in\Delta^n$ (where $\Delta^n$ is the probability simplex, see last post), probabilities for following the advice, i.e.

$$  x_{t,i}=\text{probability of listening to expert }i\text{ at time }t $$

Let $\ell^t$ be the loss vector where

$$ \ell^t_i=\text{loss of listening to expert }i\text{ at time }t $$

Our expected loss is then

$$ \sum_{i=1}^n x_{t,i}\ell^t_i = \langle x_t, \ell^t\rangle $$

This is the case of online convex optimization where at each time $t$, the generated point is $x_t\in\Delta^n$ (note that the probability simplex is convex!) and the linear convex loss is given by $f_t(x)=\langle x_t, \ell^t\rangle$.

The learning algorithm we will use for this problem is known as **multiplicative weights**.


### multiplicative weights

We give here a statistical physics approach to a no-regret algorithm for the expert advice problem.

Focusing on a single expert $i$, call the cumulative loss incurred by this expert at time $t-1$ to be the *energy*

$$ E_t(i) = \sum_{k=1}^{t-1}\ell_i^k $$

So at time $t$, the learner knows $E_t(i)$ for each $i$. By convexity of $\Delta^n$, the offline optimum of our problem is interpreted as the energy of the lowest energy (i.e. *ground state*) expert at time $t+1$,

$$ \min_{i\in\{1,...,n\}} E_t(i) $$

For any arbitrary "inverse temperature" parameter $\beta$, we trivially have $e^{-\beta\min_i E_t(i)}\le\sum_{i=1}^n e^{-\beta E_t(i)}$ and so

$$ \min_{i\in\{1,...,n\}} E_t(i) \ge -\frac{1}{\beta}\log{\sum_{i=1}^n e^{-\beta E_t(i)}} $$

where $\Phi_t = -\frac{1}{\beta}\log{\sum_{i=1}^n e^{-\beta E_t(i)}}$ is the **free energy** at temperature $1/\beta$ at time $t$. We will use this to establish a regret bound.

Given the energies of each expert, how do we decide on a distribution to sample them from? Statistical physics say to form a [Boltzmann-Gibbs distribution](https://en.wikipedia.org/wiki/Boltzmann_distribution)

$$ x_{t,i}=\frac{1}{Z_t}e^{-\beta E_t(i)} $$

where $Z_t=\sum_{i=1}^n e^{-\beta E_t(i)}$ is the **partition function** at time $t$. This makes sense-- we want to heed experts which have given us the least loss more often.

This choice of $x_t\in\Delta^n$ is the **multiplicative weights algorithm**:

```code
    maintain weights w_t = [w_t(1), w_t(2), ..., w_t(n)]
    update as
        w_t[i] <- w_{t-1}[i] * exp(-beta * loss_{t-1}[i])
    generate strategy x_t as
        x_t[i] <- w_t[i] / sum(w_t)
```

which in Python can be given as

```python
class MultiplicativeWeights(Learner):
    def __init__(self, num_experts: int):
        self.num_experts = num_experts
        # initialize weights of experts to 1.0
        self.weights = np.repeat(1.0, num_experts)
    
    def generate(self) -> np.ndarray:
        return self.weights / np.sum(self.weights)

    def suffer(self, loss: np.ndarray):
        gibbs_weights = np.exp(-self.beta * loss)
        self.weights *= gibbs_weights
```

Let us now determine the regret bound for this learning algorithm. Note that

$$
\begin{align*}
    \Phi_{t+1} - \Phi_t &= -\frac{1}{\beta}\log{\sum_{i=1}^n e^{-\beta E_{t+1}(i)}}
        + \frac{1}{\beta}\log{\sum_{i=1}^n e^{-\beta E_t(i)}} \\
        &= -\frac{1}{\beta}\log{\frac{Z_{t+1}}{Z_t}}
\end{align*}
$$

As $E_{t+1}(i)=E_t(i)+\ell_i^t$ and $Z_{t+1}=\sum_{i=1}^n e^{-\beta E_t(i)}e^{-\beta\ell_i^t}$, we have

$$ 
\begin{align*}
    \frac{Z_{t+1}}{Z_t} &= \sum_{i=1}^n\left(\frac{e^{-\beta E_t(i)}}{Z_t}\right)e^{-\beta\ell_i^t} \\
        &= \sum_{i=1}^n x_{t,i} e^{-\beta\ell_i^t}
\end{align*}
$$